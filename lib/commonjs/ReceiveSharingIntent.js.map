{"version":3,"sources":["ReceiveSharingIntent.ts"],"names":["ReceiveSharingIntent","NativeModules","ReceiveSharingIntentModule","Platform","OS","Utils","getReceivedFiles","handler","errorHandler","protocol","isIos","Linking","getInitialURL","then","res","startsWith","getFileNames","catch","addEventListener","url","clearReceivedFiles","clearFileNames","data","files","utils","sortData","e","finally","fileObject","Object","keys","map","k"],"mappings":";;;;;;;AAIA;;AACA;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,0BAAjC;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,0BAAN,CAAkE;AAAA;AAAA,mCACvCC,sBAASC,EAAT,KAAgB,KADuB;;AAAA,mCAExC,IAAIC,cAAJ,EAFwC;AAAA;;AAIhEC,EAAAA,gBAAgB,CACdC,OADc,EAEdC,YAFc,EAGdC,QAAgB,GAAG,YAHL,EAId;AACA,QAAI,KAAKC,KAAT,EAAgB;AACdC,2BAAQC,aAAR,GACGC,IADH,CACSC,GAAD,IAAc;AAClB,YAAIA,GAAG,IAAIA,GAAG,CAACC,UAAJ,CAAgB,GAAEN,QAAS,YAA3B,CAAX,EAAoD;AAClD,eAAKO,YAAL,CAAkBT,OAAlB,EAA2BC,YAA3B,EAAyCM,GAAzC;AACD;AACF,OALH,EAMGG,KANH,CAMS,MAAM,CAAE,CANjB;;AAQAN,2BAAQO,gBAAR,CAAyB,KAAzB,EAAiCJ,GAAD,IAAc;AAC5C,cAAMK,GAAG,GAAGL,GAAG,GAAGA,GAAG,CAACK,GAAP,GAAa,EAA5B;;AACA,YAAIA,GAAG,CAACJ,UAAJ,CAAgB,GAAEN,QAAS,YAA3B,CAAJ,EAA6C;AAC3C,eAAKO,YAAL,CAAkBT,OAAlB,EAA2BC,YAA3B,EAAyCM,GAAG,CAACK,GAA7C;AACD;AACF,OALD;AAMD,KAfD,MAeO;AACL,WAAKH,YAAL,CAAkBT,OAAlB,EAA2BC,YAA3B,EAAyC,EAAzC;AACD;AACF;;AAEDY,EAAAA,kBAAkB,GAAG;AACnB;AACApB,IAAAA,oBAAoB,CAACqB,cAArB;AACD;;AAESL,EAAAA,YAAY,CACpBT,OADoB,EAEpBC,YAFoB,EAGpBW,GAHoB,EAIpB;AACA,QAAI,KAAKT,KAAT,EAAgB;AACdV,MAAAA,oBAAoB,CAACgB,YAArB,CAAkCG,GAAlC,EACGN,IADH,CACSS,IAAD,IAAe;AACnB,YAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBH,IAApB,CAAZ;AACAf,QAAAA,OAAO,CAACgB,KAAD,CAAP;AACD,OAJH,EAKGN,KALH,CAKUS,CAAD,IAAYlB,YAAY,CAACkB,CAAD,CALjC,EAMGC,OANH,CAMW3B,oBAAoB,CAACqB,cANhC;AAOD,KARD,MAQO;AACLrB,MAAAA,oBAAoB,CAACgB,YAArB,GACGH,IADH,CACSe,UAAD,IAAqB;AACzB,YAAIL,KAAK,GAAGM,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,GAAxB,CAA6BC,CAAD,IAAOJ,UAAU,CAACI,CAAD,CAA7C,CAAZ;AACAzB,QAAAA,OAAO,CAACgB,KAAD,CAAP;AACAvB,QAAAA,oBAAoB,CAACqB,cAArB;AACD,OALH,EAMGJ,KANH,CAMST,YANT,EAOGmB,OAPH,CAOW3B,oBAAoB,CAACqB,cAPhC;AAQD;AACF;;AAzD+D;;eA4DnDnB,0B","sourcesContent":["import type {\n  IReceiveSharingIntent,\n  IUtils,\n} from './ReceiveSharingIntent.interfaces';\nimport { Platform, Linking, NativeModules } from 'react-native';\nimport Utils from './utils';\n\nconst { ReceiveSharingIntent } = NativeModules;\n\n/**\n * Documentation: Please read receivingSharing.ts in breakroom-mobile.\n * Original documentation here was supposed to be from https://github.com/ajith-ab/react-native-receive-sharing-intent/blob/master/src/ReceiveSharingIntent.ts\n * but it was not working for our case.\n */\nclass ReceiveSharingIntentModule implements IReceiveSharingIntent {\n  private isIos: boolean = Platform.OS === 'ios';\n  private utils: IUtils = new Utils();\n\n  getReceivedFiles(\n    handler: Function,\n    errorHandler: Function,\n    protocol: string = 'ShareMedia'\n  ) {\n    if (this.isIos) {\n      Linking.getInitialURL()\n        .then((res: any) => {\n          if (res && res.startsWith(`${protocol}://dataUrl`)) {\n            this.getFileNames(handler, errorHandler, res);\n          }\n        })\n        .catch(() => {});\n\n      Linking.addEventListener('url', (res: any) => {\n        const url = res ? res.url : '';\n        if (url.startsWith(`${protocol}://dataUrl`)) {\n          this.getFileNames(handler, errorHandler, res.url);\n        }\n      });\n    } else {\n      this.getFileNames(handler, errorHandler, '');\n    }\n  }\n\n  clearReceivedFiles() {\n    // Clear current processing URL so the same URL can be processed again\n    ReceiveSharingIntent.clearFileNames();\n  }\n\n  protected getFileNames(\n    handler: Function,\n    errorHandler: Function,\n    url: string\n  ) {\n    if (this.isIos) {\n      ReceiveSharingIntent.getFileNames(url)\n        .then((data: any) => {\n          let files = this.utils.sortData(data);\n          handler(files);\n        })\n        .catch((e: any) => errorHandler(e))\n        .finally(ReceiveSharingIntent.clearFileNames);\n    } else {\n      ReceiveSharingIntent.getFileNames()\n        .then((fileObject: any) => {\n          let files = Object.keys(fileObject).map((k) => fileObject[k]);\n          handler(files);\n          ReceiveSharingIntent.clearFileNames();\n        })\n        .catch(errorHandler)\n        .finally(ReceiveSharingIntent.clearFileNames);\n    }\n  }\n}\n\nexport default ReceiveSharingIntentModule;\n"]}